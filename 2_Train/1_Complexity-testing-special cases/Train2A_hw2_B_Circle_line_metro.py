""" Описание задачи:
Витя работает недалеко от одной из станций кольцевой линии Московского метро, а живет
рядом с другой станцией той же линии. Требуется выяснить, мимо какого наименьшего количества
промежуточных станций необходимо проехать Вите по кольцу, чтобы добраться с работы домой.

Формат ввода:
Станции пронумерованы подряд натуральными числами 1, 2, 3, …, N (1-я станция – соседняя с N-й),
N не превосходит 100.
Вводятся три числа: сначала N – общее количество станций кольцевой линии,
а затем i и j – номера станции, на которой Витя садится, и станции, на которой он должен выйти.
Числа i и j не совпадают. Все числа разделены пробелом.

Формат вывода:
Требуется выдать минимальное количество промежуточных станций (не считая станции посадки и
высадки), которые необходимо проехать Вите.
"""


def circle_line_metro(n: int, i: int, j: int) -> int:
    """
    Функция circle_line_metro вычисляет минимальное количество промежуточных станций.

    Example :
     :>>> circle_line_metro(100, 5, 6) -> 0
     На кольцевой линии 100 станций; проехать с 5-й на 6-ю станцию Витя может напрямую,
     без промежуточных станций

     :>>> circle_line_metro(10, 1, 9) -> 1
     На кольцевой линии 10 станций; проехать с 1-й на 9-ю станцию Витя может через
     одну промежуточную, ее номер 10

    :param n: общее количество станций кольцевой линии
    :param i: номера станции для посадки
    :param j: номера станции для выхода
    :return: минимальное количество промежуточных станций
    """
    i, j = min(i, j), max(i, j)
    return min(j - i - 1, i + (n - j) - 1)


n_input, i_input, j_input = map(int, input().split())
print(circle_line_metro(n_input, i_input, j_input))
