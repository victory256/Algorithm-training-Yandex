""" Описание задачи:
Из шахматной доски по границам клеток выпилили связную (не распадающуюся на части)
фигуру без дыр. Требуется определить ее периметр.

Формат ввода:
Сначала вводится число N (1 ≤ N ≤ 64) – количество выпиленных клеток. В следующих N строках
вводятся координаты выпиленных клеток, разделенные пробелом (номер строки и столбца – числа
от 1 до 8). Каждая выпиленная клетка указывается один раз.

Формат вывода:
Выведите одно число – периметр выпиленной фигуры (сторона клетки равна единице).
"""


def cut_chess_board(n_cells: int, chess_board: list) -> int:
    """
    Функция cut_chess_board выводит сообщение Y, которое Пете придется допечатать вручную

    Example :
     :>>> cut_chess_board(3, [[0,0,0,0,0,0,0,0],
                              [0,1,1,0,0,0,0,0],
                              [0,1,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0]]) -> 8
    1. Вырезан уголок из трех клеток. Сумма длин его сторон равна 8.

     :>>> cut_chess_board(1, [[0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0,1]]) -> 4
    2. Вырезана одна клетка. Ее периметр равен 4.

    :param n_cells: количество выпиленных клеток
    :param chess_board: доска с отмеченными выпиленными клетками
    :return: периметр выпиленной фигуры
    """
    # for i in range(8):
    #    print(chess_board[i])
    see_cells = 0
    delete_side = 0
    i = 0
    j = 0
    while see_cells < n_cells:
        if j == 8:
            j = 0
            i = i + 1
        if i == 8:
            break
        if chess_board[i][j] == 1:
            see_cells += 1
            if j > 0 and chess_board[i][j - 1] == 1:
                delete_side += 1
            if i > 0 and chess_board[i - 1][j] == 1:
                delete_side += 1
        j = j + 1
        # print(see_cells,i,j,delete_side)
    return 4 * n_cells - 2 * delete_side


n_cells_input = int(input())
chess_board_input = [[0] * 8 for i in range(8)]
for _ in range(n_cells_input):
    x, y = map(int, input().split())
    chess_board_input[x - 1][y - 1] = 1
print(cut_chess_board(n_cells_input, chess_board_input))
