""" Описание задачи:
Август загадал натуральное число от 1 до n.
Беатриса пытается угадать это число, для этого она называет некоторые
множества натуральных чисел.
0) Август отвечает Беатрисе YES, если среди названных
ей чисел есть задуманное или NO в противном случае.
После нескольких заданных вопросов
Беатриса запуталась в том, какие вопросы она задавала и какие ответы получила и
просит вас помочь ей определить, какие числа мог задумать Август.

Август и Беатриса продолжают играть в игру, но Август начал жульничать.
1) На каждый из вопросов Беатрисы он выбирает такой вариант ответа YES или NO,
чтобы множество возможных задуманных чисел оставалось как можно больше.
Например, если Август задумал число от 1 до 5, а Беатриса спросила про числа 1 и 2,
то Август ответит NO, а если Беатриса спросит про 1, 2, 3, то Август ответит YES.
2) Если же Бетриса в своем вопросе перечисляет ровно половину из задуманных чисел,
то Август из вредности всегда отвечает NO.
3) Наконец, Август при ответе учитывает все предыдущие вопросы Беатрисы и
свои ответы на них, то есть множество возможных задуманных чисел уменьшается.

Формат ввода:
Вам дана последовательность вопросов Беатрисы. Приведите ответы Августа на них.
Первая строка входных данных содержит число n — наибольшее число, которое мог загадать Август.
Далее идут строки, содержащие вопросы Беатрисы. Каждая строка представляет собой набор чисел,
разделенных пробелами. Последняя строка входных данных содержит одно слово HELP.

Формат вывода
Для каждого вопроса Беатрисы выведите ответ Августа на этот вопрос.
После этого выведите (через пробел, в порядке возрастания) все числа,
которые мог загадать Август после ответа на все вопросы Беатрисы.
"""


def guess_number(n: int, mass_question: list) -> str:
    """
    Функция guess_number выводит ответы Августа {YES,NO} на вопросы Беатрисы mass_question.
    И в конце выводит (через пробел, в порядке возрастания) все числа, которые
    мог загадать Август в интервале [1;n] после ответа на все вопросы Беатрисы.

    Example :
     :>>> guess_number(10,['1 2 3 4 5','2 4 6 8 10']) -> 'NO' /n 'YES' /n '6 8 10'

     :>>> guess_number(10,['1','2','3','4','5','6','7','8,'9']) ->
        'NO' /n 'NO' /n 'NO' /n 'NO' /n 'NO' /n 'NO' /n 'NO' /n 'NO' /n 'NO' /n '10'

    :param n: наибольшее число, которое мог загадать Август
    :param mass_question: вопросы Беатрисы, некоторые множества натуральных чисел
    :return: ответы Августа {YES,NO} и все числа, которые мог загадать Август
    """
    hidden_number = set(range(1, n + 1))
    for i in mass_question:
        question = set(map(int, i.split()))
        question.intersection_update(hidden_number)
        if 2 * len(question) <= len(hidden_number):
            print('NO')
            hidden_number.difference_update(question)
            #print(hidden_number)
        else:
            print('YES')
            hidden_number.intersection_update(question)
            #print(hidden_number)
    return ' '.join(list(map(str, sorted(list(hidden_number)))))


n_input = int(input())
input_str = '1'
mass_ques = []
while input_str != 'HELP':
    input_str = input()
    mass_ques.append(input_str)
# print(mass_ques[0:-1])

print(guess_number(n_input, mass_ques[0:-1]))
